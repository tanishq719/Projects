# Generated by Django 3.0.3 on 2020-06-10 19:39

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('discussions', '0001_initial'),
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('grp_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('grp_name', models.CharField(max_length=100)),
                ('grp_creation_date', models.DateField(auto_now_add=True)),
                ('access_type', models.CharField(choices=[('PUB', 'Public'), ('PRI', 'Private')], default='PUB', max_length=3)),
                ('description', models.TextField()),
                ('reputation', models.IntegerField(blank=True, default=0)),
                ('subscriber_count', models.IntegerField(blank=True, default=0)),
                ('notification_q', django.contrib.postgres.fields.jsonb.JSONField()),
                ('dp', models.ImageField(default='user.png', upload_to='profile_image')),
            ],
            options={
                'db_table': 'group',
            },
        ),
        migrations.CreateModel(
            name='Group_has_tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grp_id', models.ForeignKey(db_column='grp_id', on_delete=django.db.models.deletion.CASCADE, related_name='tagged_grp', to='groups.Group')),
            ],
            options={
                'db_table': 'group_has_tag',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag_id', models.IntegerField(primary_key=True, serialize=False)),
                ('tag_name', models.CharField(max_length=50, unique=True)),
                ('g_has_t', models.ManyToManyField(blank=True, related_name='grp_has_tag', through='groups.Group_has_tag', to='groups.Group')),
            ],
            options={
                'db_table': 'tag',
            },
        ),
        migrations.CreateModel(
            name='Group_criteria',
            fields=[
                ('grp_id', models.ForeignKey(db_column='grp_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='see_criteria', serialize=False, to='groups.Group')),
                ('criteria_value', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'group_criteria',
            },
        ),
        migrations.CreateModel(
            name='Thread_has_tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_id', models.ForeignKey(db_column='tag_id', on_delete=django.db.models.deletion.CASCADE, related_name='thread_tag', to='groups.Tag')),
                ('th_id', models.ForeignKey(db_column='th_id', on_delete=django.db.models.deletion.CASCADE, related_name='tagged_thread', to='discussions.Thread')),
            ],
            options={
                'db_table': 'thread_has_tag',
                'unique_together': {('th_id', 'tag_id')},
            },
        ),
        migrations.AddField(
            model_name='tag',
            name='th_has_t',
            field=models.ManyToManyField(blank=True, related_name='thread_has_tag', through='groups.Thread_has_tag', to='discussions.Thread'),
        ),
        migrations.CreateModel(
            name='Has_members',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grp_id', models.ForeignKey(db_column='grp_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='grp_members', to='groups.Group')),
                ('user_id', models.ForeignKey(blank=True, db_column='user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='member_user_id', to='users.Users')),
            ],
            options={
                'db_table': 'has_members',
                'unique_together': {('grp_id', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='Has_followers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('yes_notify', models.CharField(max_length=1)),
                ('notification_q', django.contrib.postgres.fields.jsonb.JSONField()),
                ('grp_id', models.ForeignKey(db_column='grp_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='grp_followers', to='groups.Group')),
                ('user_id', models.ForeignKey(db_column='user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='follower_user_id', to='users.Users')),
            ],
            options={
                'db_table': 'has_followers',
                'unique_together': {('grp_id', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='Grp_deletes_grp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', django.contrib.postgres.fields.jsonb.JSONField()),
                ('grp_id_from', models.ForeignKey(db_column='grp_id_from', on_delete=django.db.models.deletion.CASCADE, related_name='grp_deleted_grp', to='groups.Group')),
                ('grp_id_to', models.ForeignKey(db_column='grp_id_to', on_delete=django.db.models.deletion.DO_NOTHING, related_name='deleted_grp_id', to='groups.Group')),
            ],
            options={
                'db_table': 'grp_deleted_grp',
                'unique_together': {('grp_id_from', 'grp_id_to')},
            },
        ),
        migrations.CreateModel(
            name='Grp_blocks_user',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grp_id', models.ForeignKey(db_column='grp_id', on_delete=django.db.models.deletion.CASCADE, related_name='grp_blocked_usr', to='groups.Group')),
                ('user_id', models.ForeignKey(blank=True, db_column='user_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blocked_user_id', to='users.Users')),
            ],
            options={
                'db_table': 'grp_blocks_user',
                'unique_together': {('grp_id', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='Grp_blocks_grp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grp_id_from', models.ForeignKey(db_column='grp_id_from', on_delete=django.db.models.deletion.CASCADE, related_name='grp_blocked_grp', to='groups.Group')),
                ('grp_id_to', models.ForeignKey(blank=True, db_column='grp_id_to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blocked_grp_id', to='groups.Group')),
            ],
            options={
                'db_table': 'grp_blocks_grp',
                'unique_together': {('grp_id_from', 'grp_id_to')},
            },
        ),
        migrations.AddField(
            model_name='group_has_tag',
            name='tag_id',
            field=models.ForeignKey(db_column='tag_id', on_delete=django.db.models.deletion.CASCADE, related_name='grp_tag', to='groups.Tag'),
        ),
        migrations.AddField(
            model_name='group',
            name='g_blocks_g',
            field=models.ManyToManyField(blank=True, related_name='_group_g_blocks_g_+', through='groups.Grp_blocks_grp', to='groups.Group'),
        ),
        migrations.AddField(
            model_name='group',
            name='g_blocks_u',
            field=models.ManyToManyField(blank=True, related_name='blocked_by_grp', through='groups.Grp_blocks_user', to='users.Users'),
        ),
        migrations.AddField(
            model_name='group',
            name='g_deletes_g',
            field=models.ManyToManyField(blank=True, related_name='_group_g_deletes_g_+', through='groups.Grp_deletes_grp', to='groups.Group'),
        ),
        migrations.AddField(
            model_name='group',
            name='g_followers_u',
            field=models.ManyToManyField(blank=True, related_name='subscribed_to', through='groups.Has_followers', to='users.Users'),
        ),
        migrations.AddField(
            model_name='group',
            name='g_members_u',
            field=models.ManyToManyField(blank=True, related_name='owned_grp', through='groups.Has_members', to='users.Users'),
        ),
        migrations.AddField(
            model_name='group',
            name='g_parent_id',
            field=models.ForeignKey(db_column='g_parent_id', on_delete=django.db.models.deletion.CASCADE, to='groups.Group'),
        ),
        migrations.AddField(
            model_name='group',
            name='grp_admin',
            field=models.ForeignKey(db_column='grp_admin', on_delete=django.db.models.deletion.PROTECT, related_name='grp_admin', to='users.Users'),
        ),
        migrations.AlterUniqueTogether(
            name='group_has_tag',
            unique_together={('grp_id', 'tag_id')},
        ),
    ]
